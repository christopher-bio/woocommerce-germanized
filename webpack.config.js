const path = require( 'path' );
const defaultConfig = require( '@wordpress/scripts/config/webpack.config' );
const WooCommerceDependencyExtractionWebpackPlugin = require( '@woocommerce/dependency-extraction-webpack-plugin' );
const MiniCssExtractPlugin = require( 'mini-css-extract-plugin' );
const TerserJSPlugin = require( 'terser-webpack-plugin' );
const CssMinimizerPlugin = require("css-minimizer-webpack-plugin");
const { omit } = require( 'lodash' );
const fs = require("fs");
const CopyWebpackPlugin = require( 'copy-webpack-plugin' );
const glob = require( 'glob' );
const { paramCase } = require( 'change-case' );

// This is a simple webpack plugin to delete the JS files generated by MiniCssExtractPlugin.

function RemoveFilesPlugin( filePath = '' ) {
    this.filePath = filePath;
}

RemoveFilesPlugin.prototype.apply = function ( compiler ) {
    compiler.hooks.afterEmit.tap( 'afterEmit', () => {
        const files = glob.sync( this.filePath );
        files.forEach( ( f ) => {
            fs.unlink( f, ( err ) => {
                if ( err ) {
                    /* eslint-disable-next-line no-console */
                    console.log( `There was an error removing ${ f }.`, err );
                }
            } );
        } );
    } );
};

function findModuleMatch( module, match ) {
    if ( module.request && match.test( module.request ) ) {
        return true;
    } else if ( module.issuer ) {
        return findModuleMatch( module.issuer, match );
    }
    return false;
}

// Remove SASS rule from the default config so we can define our own.
const defaultRules = defaultConfig.module.rules.filter( ( rule ) => {
    return String( rule.test ) !== String( /\.(sc|sa)ss$/ );
} );

const blocks = {
    'checkout': {},
    'cart': {}
};

const getBlockEntries = ( relativePath ) => {
    return Object.fromEntries(
        Object.entries( blocks )
            .map( ( [ blockCode, config ] ) => {
                const filePaths = glob.sync(
                    `./assets/js/blocks/${ config.customDir || blockCode }/` +
                    relativePath
                );
                if ( filePaths.length > 0 ) {
                    return [ blockCode, filePaths ];
                }
                return null;
            } )
            .filter( Boolean )
    );
};

const staticCss = glob.sync('./assets/css/*.scss').reduce(function(obj, el){
    obj[ path.parse(el).name + '-styles' ] = el;
    return obj
},{});

const staticJs = glob.sync('./assets/js/static/*.js').reduce(function(obj, el){
    obj[ path.parse(el).name ] = el;
    return obj
},{});

const staticEntry = { ...staticCss, ...staticJs }

const entries = {
    'static': staticEntry
};

console.log(entries);

const getEntryConfig = ( type = 'main', exclude = [] ) => {
    return omit( entries[ type ], exclude );
};

const getAlias = ( options = {} ) => {
    return {
        '@wooshipments/base-components': path.resolve(
            __dirname,
            `/assets/js/base/components/`
        ),
    };
};

const wcDepMap = {
    '@woocommerce/blocks-registry': [ 'wc', 'wcBlocksRegistry' ],
    '@woocommerce/settings': [ 'wc', 'wcSettings' ],
    '@woocommerce/block-data': [ 'wc', 'wcBlocksData' ],
    '@woocommerce/data': [ 'wc', 'data' ],
    '@woocommerce/shared-context': [ 'wc', 'wcBlocksSharedContext' ],
    '@woocommerce/shared-hocs': [ 'wc', 'wcBlocksSharedHocs' ],
    '@woocommerce/price-format': [ 'wc', 'priceFormat' ],
    '@woocommerce/blocks-checkout': [ 'wc', 'blocksCheckout' ],
    '@woocommerce/interactivity': [ 'wc', '__experimentalInteractivity' ]
};

const wcHandleMap = {
    '@woocommerce/blocks-registry': 'wc-blocks-registry',
    '@woocommerce/settings': 'wc-settings',
    '@woocommerce/block-data': 'wc-blocks-data-store',
    '@woocommerce/data': 'wc-store-data',
    '@woocommerce/shared-context': 'wc-blocks-shared-context',
    '@woocommerce/shared-hocs': 'wc-blocks-shared-hocs',
    '@woocommerce/price-format': 'wc-price-format',
    '@woocommerce/blocks-checkout': 'wc-blocks-checkout',
    '@woocommerce/interactivity': 'wc-interactivity'
};

const requestToExternal = ( request ) => {
    if ( wcDepMap[ request ] ) {
        return wcDepMap[ request ];
    }
};

const requestToHandle = ( request ) => {
    if ( wcHandleMap[ request ] ) {
        return wcHandleMap[ request ];
    }
};

const StaticConfig = {
    ...defaultConfig,
    entry: getEntryConfig( 'static', [] ),
    resolve: {
        extensions: ['.js', '.css', '.scss']
    },
    output: {
        path: path.resolve( __dirname, './build/static/' ),
        filename: "[name].js",
    }
};

module.exports = [
    StaticConfig
];